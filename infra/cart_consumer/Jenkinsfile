pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                docker {
                    //This image parameter (of the agent sectionâ€™s docker parameter) downloads the python:2-alpine
                    //Docker image and runs this image as a separate container. The Python container becomes
                    //the agent that Jenkins uses to run the Build stage of your Pipeline project.
                    image '3.10.10-alpine3.17'
                }
            }
            steps {
                //This sh step runs the Python command to compile your application and
                //its calc library into byte code files, which are placed into the sources workspace directory
                sh 'python --version'
                //This stash step saves the Python source code and compiled byte code files from the sources
                //workspace directory for use in later stages.
                stash(name: 'compiled-results', includes: 'sources/*.py*')
            }
        }
    
      stage('checkout') {
         steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/anikkale/contract-testing-python']]])
         }
      }
      
      stage('Install Dependencies') {
         steps {
             sh 'npm install'
        }
      }
      
      stage('Run Consumer Test') {
         steps {
             sh 'npm run consumer-service-pact'
        }
      }
      
      stage('Publish Consumer Pact to Pact Broker') {
         steps {
             sh 'node src/rest-api/consumer/consumerPactPublish.js'
        }
      }

      stage('Deploy') {
         steps {
            sh 'pact-broker can-i-deploy --pacticipant=DateConsumer --broker-base-url=http://pact_broker.com:9292 --latest'
         }
      }
}
}